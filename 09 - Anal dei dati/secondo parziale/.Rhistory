4.5 + c(-1, 1) * qt(0.975, df = 23) * 2.7 / sqrt(24)
t <- (4.5 - 3.7) / sqrt(2.7 ^ 2 / 24 + 2 ^ 2 /18)
t
gradi <- (2.7 ^ 2 / 24 + 2 ^ 2 / 18) ^ 2 / ( 2.7 ^ 4 / (24 ^ 2 * 23) + 2 ^ 4 / (18 ^ 2 * 17))
gradi
1 - pt(t, df = gradi)
vecchi <- open ("vecchia_versione.csv")
vecchi <- file("vecchia_versione.csv")
nuovi <- file("nuova_versione.csv")
head(vecchi)
head(nuovi)
nuovi
vecchi <- read.csv("vecchia_versione.csv")
nuovi <- read.csv("nuova_versione.csv")
head(vecchi)
head(nuovi)
v <- vecchi$x
n <- nuovi$x
library("car")
qqplot(vecchi)
qqplot(v)
v
qqPlot(v)
qqPlot(n)
t.test(vecchi)
t.test(vecchi, conf.level = 90)
t.test(vecchi, conf.level = .1)
t.test(vecchi, conf.level = .95)
t.test(vecchi, conf.level = .99)
t.test(vecchi, nuovi, alternative = 'less')
t.test(vecchi, nuovi, alternative = 'greater')
t.test(vecchi, nuovi, alternative = 'less')
mammiferi <- read.csv("mammiferi.csv")
mammiferi
plot(corpo ~ cervello)
plot(mammiferi$corpo ~ mammifer$cervello)
plot(mammiferi$corpo ~ mammiferi$cervello)
plot(log(mammiferi$corpo) ~ log(mammiferi$cervello))
#stimo la retta di regressione
mod <- lm(log(mammiferi$corpo) ~ log(mammiferi$cervello))
summary(mod)
plot(cervello ~ corpo, data = mammiferi)
mammiferi <- read.csv("mammiferi.csv")
plot(cervello ~ corpo, data = mammiferi)
mod <- lm(cervello ~ corpo, data = mammiferi)
summary(mod)
library(car)
mod <- lm(log(mammiferi$corpo) ~ log(mammiferi$cervello))
plot(residuals(mod) ~ mammiferi$corpo)
plot(residuals(mod) ~ log(mammiferi$corpo))
summary(mod)
abline(mod)
plot(log(mammiferi$corpo) ~ log(mammiferi$cervello))
abline(mod)
efficienza <- read.csv("efficienza.csv")
plot(log(mammiferi$corpo) ~ log(mammiferi$cervello))
mod
mod <- m(formula = log(mammiferi$corpo) ~ log(mammiferi$cervello) + Ilog(mammiferi$cervello)^2)
mod <- lm(formula = log(mammiferi$corpo) ~ log(mammiferi$cervello) + Ilog(mammiferi$cervello)^2)
mod <- lm(formula = log(mammiferi$corpo) ~ log(mammiferi$cervello) + I(log(mammiferi$cervello)^2))
abline(mmod)
abline(mod)
install.packages("openintro")
install.packages("openintro")
library("openintro")
clear
cls
clear()
n1 <- 320
x1 <- 31
p1 <- x1 / n1
n2 <- 320
x2 <- 17
p2 <- x2 / n2
z <- qnorm(0.995)
ic_p1 <- p1 + c(-1, 1) * z * sqrt(p1 * (1 - p1) / n1)
ic_p2 <- p2 + c(-1, 1) * z * sqrt(p2 * (1 - p2) / n2)
cat("Intervallo al 99% prima:", ic_p1, "\n")
cat("Intervallo al 99% dopo :", ic_p2, "\n")
p_pooled <- (x1 + x2) / (n1 + n2)
se <- sqrt(p_pooled * (1 - p_pooled) * (1 / n1 + 1 / n2))
z_test <- (p1 - p2) / se
p_value <- 1 - pnorm(z_test)
z_test
p_value
pre <- read.csv("campione_pre_audit.csv")
pre
head(pre)
post <- read.csv("campione_post_audit.csv")
head(post)
x1 <- sum(pre$conform)
x1
n1 <- nrow(pre)
n1
n1
x1 <- sum(pre$conform)
n1 <- nrow(pre)
p1 <- p1 <- x1 / n1
x2 <- sum(post$conform)
n2 <- nrow(post)
p2 <- x2 / n2
n1
x1
n2
x2
z <- qnorm(0.995)
ic_p1 <- p1 + c(-1, 1) * z * sqrt(p1 * (1 - p1) / n1)
ic_p2 <- p2 + c(-1, 1) * z * sqrt(p2 * (1 - p2) / n2)
ic_p1
ic_p2
p_pooled <- (x1 + x2) / (n1 + n2)
se <- sqrt(p_pooled * (1 - p_pooled) * (1 / n1 + 1 / n2))
z_test <- (p1 - p2) / se
p_value <- 1 - pnorm(z_test)
z_test
p_value
dati <- read.csv("performance_studente.csv")
head(dati)
plot(voto_esame ~ ore_studio, data = dati)
mod <- m(data$voto_esame ~ data$ore_studio)
mod <- lm(data$voto_esame ~ data$ore_studio)
mod <- lm(dati$voto_esame ~ dati$ore_studio)
abline(mod)
summary(mod)
plot(residuals(mod) ~ fitted(mod))
abline(h = 0, col = "red")
qqPlot(residuals(mod))
library(car)
plot(residuals(mod) ~ fitted(mod))
abline(h = 0, col = "red")
qqPlot(residuals(mod))
plot(residuals(mod) ~ fitted(mod))
abline(h = 0, col = "red")
modq <- lm(dati$voto_esame ~ dati$ore_studio + I(dati$ore_studio ^ 2))
summary(modq)
plot(residuals(mod) ~ fitted(mod))
plot(residuals(modq) ~ fitted(modq))
modlog <- lm( log(dati$voto_esame) ~ log(dati$ore_studio))
modlog <- lm( log(dati$voto_esame) ~ log(dati$ore_studio))
modlog <- lm( log(dati$voto_esame) ~ log(dati$ore_studio))
plot( log(dati$voto_esame) ~ log(dati$ore_studio))
plot( dati$voto_esame ~ log(dati$ore_studio))
modlog <- lm( dati$voto_esame ~ log(dati$ore_studio) )
abline(modlog)
summary(modlog)
summary(mod)
plot(dati$voto_esame ~ dati$ore_studio)
outliers1 <- which(dati$ore_studio < 10, dati$voto_esame>25)
outliers1
dati
outliers1 <- which(dati$ore_studio < 10 and dati$voto_esame>25)
outliers1 <- which(dati$ore_studio < 10 & dati$voto_esame>25)
outliers1
outliers1 <- which(dati$ore_studio < 10)
outliers1
outliers1 <- which(dati$ore_studio < 20)
outliers1
outliers1 <- which(dati$ore_studio < 20 & dati$voto_esame > 25)
outliers1
outliers2 <- which(dati$ore_studio > 80 & dati$voto_esame < 10)
outliers2
mod2 <- lm(dati$ore_studio ~ dati$voto_esame, subset = -outliers1 -outliers2)
summary(mod2)
mod2 <- lm(dati$ore_studio ~ dati$voto_esame, subset = -outliers1 -outliers2)
abline(mod2)
mod2 <- lm(dati$ore_studio ~ dati$voto_esame, subset = -outliers1)
abline (mod2)
summary(mod)
pr <- predict(mod, newdata = data.frame(ore_studio = c(30, 80)), interval = "prediction", level = 0.96)
pr <- predict(mod, newdata = data.frame(ore_studio), interval = "prediction", level = 0.96)
pr <- predict(mod, newdata = data.frame(dati$ore_studio), interval = "prediction", level = 0.96)
pr
pr <- predict(mod, newdata = data.frame(dati$ore_studio = 30) level = 0.96)
mod2 <- lm(dati$voto_esame ~ dati$ore_studio, subset = -outliers1)
summary(mod2)
plot(dati$voto_esame ~ dati$ore_studio)
abline(mod2)
outliers <- outliers1 | outlliers2
outliers <- outliers1 | outliers2
outliers
outliers <- outliers1 + outliers2
outliers
outliers <- outliers1.join(outliers2)
outliers <- c(outliers1, outliers2)
outliers
mod2 <- lm(dati$voto_esame ~ dati$ore_studio, subset = -outliers)
abline(mod2)
abline(mod2, col = 'red')
summary(mod2)
plot(residuals(mod2) ~ fitted(mod2))
abline(h = 0, col = "red")
qqPlot(residuals(mod2))
mod2log <- lm(dati$voto_esame ~ log(dati$ore_studio), , subset = -outliers)
plot(dati$voto_esame ~ log(dati$ore_studio))
abline(mod2log)
qqPlot(residuals(mod2log))
plot(residuals(mod2log) ~ fitted(mod2log))
> abline(h = 0, col = "red")
plot(residuals(mod2log) ~ fitted(mod2log))abline(h = 0, col = "red")
plot(residuals(mod2log) ~ fitted(mod2log))
abline(h = 0, col = "red")
summary(mod2log)
